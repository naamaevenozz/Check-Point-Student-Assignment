"""
This module provides a class to parse and rank GitHub repositories marked as Exploits.
It fetches repository data from GitHub API and rates them by popularity (stars, forks).
"""
import re
import requests
from models import GitHubExploit
from typing import Optional
from utils import handle_http_error



class GitHubSearchEngine:
    def __init__(self, token: Optional[str] = None):
        # Sets the Accept header to use GitHub API v3 with JSON format, as officially recommended.
        self.headers = {
            "Accept": "application/vnd.github.v3+json"
        }
        if token:
            self.headers["Authorization"] = f"Bearer {token}"


    def fetch_github_data(self, url: str) -> GitHubExploit:
        """
        Fetches metadata from a given GitHub repository URL, including the number of stars and forks.

        This function converts a regular GitHub repository URL into a GitHub API endpoint and sends a
        request to retrieve repository metadata. If the request is successful, it populates a
        GitHubExploit object with the URL, star count, and fork count
        """
        # Convert the regular GitHub URL into a GitHub API endpoint (for metadata requests)
        github_exploit = GitHubExploit('', 0, 0)
        api_url = self.convert_to_api_url(url)
        if not api_url:
            return github_exploit

        try:
            response = requests.get(api_url, headers=self.headers)
            response.raise_for_status()
            data = response.json()
            github_exploit.url = url
            github_exploit.stars = data.get("stargazers_count", 0)
            github_exploit.forks = data.get("forks_count", 0)
            return github_exploit

        except requests.exceptions.HTTPError as err:
            handle_http_error(err, source="GitHub", context="metadata", info=str(api_url))
        except requests.exceptions.RequestException as e:
            print(f"[Error] Request failed while accessing GitHub metadata: {e}")

        # Fallback return in case of error
        return github_exploit

    def convert_to_api_url(self, url: str) -> str:
        match = re.match(r"https?://github\.com/([^/]+)/([^/]+)", url)
        if match:
            owner, repo = match.groups()
            repo = repo.split('.')[0]  # Strip .git if present
            return f"https://api.github.com/repos/{owner}/{repo}"
        return ""



